[{"/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/index.js":"1","/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/App.js":"2","/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/layout.js":"3","/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/home.js":"4","/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/utils/currencies.js":"5","/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/CurrencyTable.js":"6","/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/utils/fetchUtils.js":"7","/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/CurrencyConverter.js":"8"},{"size":490,"mtime":1629410401641,"results":"9","hashOfConfig":"10"},{"size":443,"mtime":1629670424773,"results":"11","hashOfConfig":"10"},{"size":648,"mtime":1630206236820,"results":"12","hashOfConfig":"10"},{"size":2309,"mtime":1630203714792,"results":"13","hashOfConfig":"10"},{"size":2306,"mtime":1629603002231,"results":"14","hashOfConfig":"10"},{"size":829,"mtime":1629673966373,"results":"15","hashOfConfig":"10"},{"size":262,"mtime":1629661439031,"results":"16","hashOfConfig":"10"},{"size":6037,"mtime":1630289417319,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"fopp2c",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/index.js",[],["37","38"],"/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/App.js",[],"/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/layout.js",["39","40"],"import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst Layout = (props) => {\n  return (\n    <React.Fragment>\n      <nav className=\"navbar justify-content-center\">\n        <span className=\"h1 pt-2 m-2 text-center\">Currency Converter & Exchange Rates</span>\n      </nav>\n      <div className=\"container app-body pt-3\">\n        {props.children}\n      </div>\n      <footer className=\"footer text-center p-4\">\n        <div>\n          <span className=\"text-white\">Portfolio: <a className=\"text-white\" href=\"\" target=\"_blank\">xyz@example.com</a></span>\n        </div>\n      </footer>\n    </React.Fragment>\n  );\n}\nexport default Layout;","/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/home.js",[],"/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/utils/currencies.js",[],"/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/CurrencyTable.js",[],"/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/utils/fetchUtils.js",[],"/Users/sierrazang/Documents/Altcademy/ReactJS/currency-exchange-app/src/CurrencyConverter.js",["41"],"import React from 'react';\nimport currencies from './utils/currencies';\nimport { checkStatus, json } from './utils/fetchUtils';\nimport Chart from 'chart.js';\n\nclass CurrencyConverter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const params = new URLSearchParams(props.location);\n\n    this.state = {\n      rate: 0,\n      baseAcronym: params.get('base') || 'USD',\n      baseValue: 0,\n      quoteAcronym: params.get('quote') || 'JPY',\n      quoteValue: 0,\n      loading: false,\n    };\n\n     this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { baseAcronym, quoteAcronym } = this.state;\n    this.getRate(baseAcronym, quoteAcronym);\n    this.getHistoricalRates(baseAcronym, quoteAcronym);\n  }\n\n  getRate = (base, quote) => {\n    this.setState({ loading: true });\n    fetch(`https://altexchangerateapi.herokuapp.com/latest?from=${base}&to=${quote}`)\n      .then(checkStatus)\n      .then(json)\n      .then(data => {\n        if (data.error) {\n          throw new Error(data.error);\n        }\n\n        const rate = data.rates[quote];\n\n        this.setState({\n          rate,\n          baseValue: 1,\n          quoteValue: Number((1 * rate).toFixed(2)),\n          loading: false,\n        });\n      })\n      .catch(error => console.error(error.message));\n  }\n\n  getHistoricalRates = (base, quote) => {\n    const endDate = new Date().toISOString().split('T')[0];\n    const startDate = new Date((new Date()).getTime() - (30 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0];\n\n    fetch(`https://altexchangerateapi.herokuapp.com/${startDate}..${endDate}?from=${base}&to=${quote}`)\n      .then(checkStatus)\n      .then(json)\n      .then(data => {\n        if (data.error) {\n          throw new Error(data.error);\n        }\n\n        const chartLabels = Object.keys(data.rates);\n        const chartData = Object.values(data.rates).map(rate => rate[quote]);\n        const chartLabel = `${base}/${quote}`;\n        this.buildChart(chartLabels, chartData, chartLabel);\n      })\n      .catch(error => console.error(error.message));\n  }\n\n  buildChart = (labels, data, label) => {\n    const chartRef = this.chartRef.current.getContext(\"2d\");\n\n    if (typeof this.chart !== \"undefined\") {\n      this.chart.destroy();\n    }\n\n    this.chart = new Chart(this.chartRef.current.getContext(\"2d\"), {\n      type: 'line',\n      data: {\n        labels,\n        datasets: [\n          {\n            label: label,\n            data,\n            fill: false,\n            tension: 0,\n          }\n        ]\n      },\n      options: {\n        responsive: true,\n      }\n    })\n  }\n\n  toBase(amount, rate) {\n    return amount * (1 / rate);\n  }\n\n  toQuote(amount, rate) {\n    return amount * rate;\n  }\n\n  convert(amount, rate, equation) {\n    const input = parseFloat(amount);\n    if (Number.isNaN(input)) {\n      return '';\n    }\n    return equation(input, rate).toFixed(2);\n  }\n\n  changeBaseAcronym = (event) => {\n    const baseAcronym = event.target.value;\n    this.setState({ baseAcronym });\n    this.getRate(baseAcronym, this.state.quoteAcronym);\n    this.getHistoricalRates(baseAcronym, this.state.quoteAcronym);\n  }\n\n  changeBaseValue = (event) => {\n    const quoteValue = this.convert(event.target.value, this.state.rate, this.toQuote);\n    this.setState({\n      baseValue: event.target.value,\n      quoteValue,\n    });\n  }\n\n  changeQuoteAcronym = (event) => {\n    const quoteAcronym = event.target.value;\n    this.setState({ quoteAcronym });\n    this.getRate(this.state.baseAcronym, quoteAcronym);\n    this.getHistoricalRates(this.state.baseAcronym, quoteAcronym);\n  }\n\n  changeQuoteValue = (event) => {\n    const baseValue = this.convert(event.target.value, this.state.rate, this.toBase);\n    this.setState({\n      quoteValue: event.target.value,\n      baseValue,\n    });\n  }\n\n  render() {\n    const { rate, baseAcronym, baseValue, quoteAcronym, quoteValue, loading } = this.state;\n\n    const currencyOptions = Object.keys(currencies).map(currencyAcronym => <option key={currencyAcronym} value={currencyAcronym}>{currencyAcronym}</option>);\n\n    return (\n      <React.Fragment>\n        <div className=\"text-center p-3 bg-light\">\n          <h2 className=\"mb-2\">Currency Converter</h2>\n          <h4>1 {baseAcronym} to 1 {quoteAcronym} = {rate.toFixed(2)} {currencies[quoteAcronym].name}</h4>\n        </div>\n        <form className=\"form-row p-3 mb-4 bg-light justify-content-center\">\n          <div className=\"form-group mb-0 px-5\">\n            <select value={baseAcronym} onChange={this.changeBaseAcronym} className=\"form-control form-control-lg mb-2\" disabled={loading}>\n              {currencyOptions}\n            </select>\n            <div className=\"input-group\">\n              <div className=\"input-group-prepend\">\n                <div className=\"input-group-text\">{currencies[baseAcronym].symbol}</div>\n              </div>\n              <input id=\"base\" className=\"form-control\" value={baseValue} onChange={this.changeBaseValue} type=\"number\" />\n            </div>\n            <small className=\"text-secondary\">{currencies[baseAcronym].name}</small>\n          </div>\n          <div className=\"py-3 d-flex justify-content-center align-items-center\">\n            <h3>=</h3>\n          </div>\n          <div className=\"form-group mb-0 px-5\">\n            <select value={quoteAcronym} onChange={this.changeQuoteAcronym} className=\"form-control mb-2\" disabled={loading}>\n              {currencyOptions}\n            </select>\n            <div className=\"input-group\">\n              <div className=\"input-group-prepend\">\n                <div className=\"input-group-text\">{currencies[quoteAcronym].symbol}</div>\n              </div>\n              <input id=\"quote\" className=\"form-control\" value={quoteValue} onChange={this.changeQuoteValue} type=\"number\" />\n            </div>\n            <small className=\"text-secondary\">{currencies[quoteAcronym].name}</small>\n          </div>\n        </form>\n        {<canvas className=\"canvas\" ref={this.chartRef} />}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default CurrencyConverter",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":2,"column":10,"nodeType":"48","messageId":"49","endLine":2,"endColumn":14},{"ruleId":"50","severity":1,"message":"51","line":15,"column":51,"nodeType":"52","endLine":15,"endColumn":101},{"ruleId":"46","severity":1,"message":"53","line":73,"column":11,"nodeType":"48","messageId":"49","endLine":73,"endColumn":19},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'chartRef' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]